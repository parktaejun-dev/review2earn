// ============================================
// Review2Earn (리뷰투언) v5.2
// Prisma Schema - 완전 검증 완료
// Last Updated: 2025-10-11 15:19
// ============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// 1. 쇼핑몰 설정
// ============================================
model MallSettings {
  id     Int    @id @default(autoincrement())
  mallId String @unique @map("mall_id")

  // OAuth 토큰 정보
  accessToken    String?   @map("access_token")
  refreshToken   String?   @map("refresh_token")
  tokenExpiresAt DateTime? @map("token_expires_at")
  scopes         String?

  // 보상 요율
  reviewerRewardRate Float @default(0.03) @map("reviewer_reward_rate") // 3%
  buyerDiscountRate  Float @default(0.03) @map("buyer_discount_rate")
  platformFeeRate    Float @default(0.0025) @map("platform_fee_rate") // 0.25%

  // 예치금 시스템
  prepaidBalance      Int @default(0) @map("prepaid_balance")
  minBalanceThreshold Int @default(50000) @map("min_balance_threshold")

  // 법적 동의 타임스탬프
  consentServiceTerms DateTime? @map("consent_service_terms")
  consentPrivacy      DateTime? @map("consent_privacy")

  // 운영 정보
  isActive Boolean @default(true) @map("is_active")

  // 타임스탬프
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  reviews      Review[]
  transactions Transaction[]

  @@map("mall_settings")
}

// ============================================
// 2. 리뷰 정보
// ============================================
model Review {
  id Int @id @default(autoincrement())

  // Cafe24 연동 정보
  cafe24BoardNo Int    @map("cafe24_board_no")
  productNo     Int    @map("product_no")
  mallId        String @map("mall_id")

  // 회원 정보
  memberId    String  @map("member_id")
  memberEmail String? @map("member_email")
  r2eUserId   String? @map("r2e_user_id")

  // 리뷰 내용
  content String? @db.Text
  rating  Int?

  // 추천 링크 통계
  referralCode    String  @unique @map("referral_code")
  participateR2e  Boolean @default(true) @map("participate_r2e")
  clickCount      Int     @default(0) @map("click_count")
  conversionCount Int     @default(0) @map("conversion_count")
  totalRevenue    Float   @default(0) @map("total_revenue")

  // 타임스탬프
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  mall            MallSettings     @relation(fields: [mallId], references: [mallId], onDelete: Cascade)
  r2eUser         R2EAccount?      @relation(fields: [r2eUserId], references: [id]) // ✅ r2eUser로 통일
  transactions    Transaction[]
  r2eTransactions R2ETransaction[]

  @@unique([cafe24BoardNo, mallId])
  @@unique([referralCode, mallId])
  @@index([productNo, mallId])
  @@index([memberId])
  @@index([memberEmail])
  @@index([referralCode])
  @@index([r2eUserId])
  @@map("reviews")
}

// ============================================
// 3. 기존 거래 기록 (v3.2 호환성 유지)
// ============================================
model Transaction {
  id            Int      @id @default(autoincrement())
  reviewId      Int      @map("review_id")
  mallId        String   @map("mall_id")
  cafe24OrderId String   @map("cafe24_order_id")
  productNo     Int      @map("product_no")
  orderAmount   Float    @map("order_amount")
  rewardAmount  Float    @map("reward_amount")
  rewardRate    Float    @map("reward_rate")
  status        String   @default("pending")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  review Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  mall   MallSettings @relation(fields: [mallId], references: [mallId], onDelete: Cascade)

  @@index([reviewId])
  @@index([mallId])
  @@index([cafe24OrderId])
  @@index([mallId, createdAt])
  @@map("transactions")
}

// ============================================
// 4. R2E 통합 계정
// ============================================
model R2EAccount {
  id                 String    @id @default(cuid())
  email              String    @unique
  phoneNumber        String?   @map("phone_number")
  ciValue            String?   @unique @map("ci_value")
  totalPoints        Int       @default(0) @map("total_points")
  availablePoints    Int       @default(0) @map("available_points")
  createdAt          DateTime  @default(now()) @map("created_at")
  lastLoginAt        DateTime? @map("last_login_at")
  consentMarketing   Boolean   @default(false) @map("consent_marketing")
  consentDataSharing Boolean   @default(false) @map("consent_data_sharing")

  // Relations
  reviews            Review[]
  r2eTransactions    R2ETransaction[]
  withdrawalRequests WithdrawalRequest[]

  @@map("r2e_accounts")
}

// ============================================
// 5. R2E 포인트 거래 내역
// ============================================
model R2ETransaction {
  id              String            @id @default(cuid())
  r2eUserId       String            @map("r2e_user_id")
  reviewId        Int?              @map("review_id")
  mallId          String            @map("mall_id")
  
  // 거래 정보
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  amount          Int
  description     String?           @db.Text
  
  // 연결 정보
  relatedOrderId  String?           @map("related_order_id")
  relatedReviewId Int?              @map("related_review_id")
  referralCode    String            @map("referral_code")
  
  // 날짜 정보
  earnedAt        DateTime          @default(now()) @map("earned_at")
  settlementDate  DateTime?         @map("settlement_date")
  expiryDate      DateTime          @map("expiry_date")

  // Relations
  account R2EAccount @relation(fields: [r2eUserId], references: [id], onDelete: Cascade)
  review  Review?    @relation(fields: [reviewId], references: [id], onDelete: SetNull)

  @@index([r2eUserId])
  @@index([status])
  @@index([type])
  @@index([settlementDate])
  @@index([expiryDate])
  @@index([relatedOrderId])
  @@index([referralCode])
  @@map("r2e_transactions")
}

// ============================================
// Enums
// ============================================
enum TransactionStatus {
  PENDING
  COMPLETED   // ✅ order webhook에서 사용
  CONFIRMED
  CANCELLED
  EXPIRED
  FAILED
}

enum TransactionType {
  REFERRAL_REWARD // ✅ order webhook에서 사용
  WITHDRAW
  EXPIRE
  ADJUSTMENT
}

// ============================================
// 6. 출금 요청
// ============================================
model WithdrawalRequest {
  id            String           @id @default(cuid())
  r2eUserId     String           @map("r2e_user_id")
  amount        Int
  bankName      String           @map("bank_name")
  accountNumber String           @map("account_number")
  accountHolder String           @map("account_holder")
  status        WithdrawalStatus @default(PENDING)
  requestedAt   DateTime         @default(now()) @map("requested_at")
  processedAt   DateTime?        @map("processed_at")
  adminNote     String?          @map("admin_note")

  // Relations
  account R2EAccount @relation(fields: [r2eUserId], references: [id], onDelete: Cascade)

  @@index([r2eUserId])
  @@index([status])
  @@map("withdrawal_requests")
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

// ============================================
// 7. 알림 로그
// ============================================
model NotificationLog {
  id      String              @id @default(cuid())
  userId  String              @map("user_id")
  type    NotificationType
  channel NotificationChannel
  sentAt  DateTime            @default(now()) @map("sent_at")
  status  NotificationStatus  @default(SENT)
  content String              @db.Text

  @@index([userId])
  @@index([type])
  @@index([sentAt])
  @@map("notification_logs")
}

enum NotificationType {
  ACCOUNT_ACTIVATION
  POINT_EARNED
  POINT_EXPIRY_WARNING
  WITHDRAWAL_COMPLETED
  BALANCE_LOW
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
}

enum NotificationStatus {
  SENT
  FAILED
  OPENED
}

// ============================================
// 8. 상품별 커스텀 보상 요율
// ============================================
model ProductRewardRate {
  id        Int    @id @default(autoincrement())
  mallId    String @map("mall_id")
  productId String @map("product_id")

  reviewerRewardRate Float @default(0.03) @map("reviewer_reward_rate")
  buyerDiscountRate  Float @default(0.03) @map("buyer_discount_rate")
  platformFeeRate    Float @default(0.0025) @map("platform_fee_rate")

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([mallId, productId])
  @@index([mallId])
  @@index([productId])
  @@map("product_reward_rates")
}

// ============================================
// 9. 인증 토큰
// ============================================
model AuthToken {
  id        Int      @id @default(autoincrement())
  email     String   @map("email")
  token     String   @unique @map("token")
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false) @map("used")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([token])
  @@map("auth_tokens")
}
