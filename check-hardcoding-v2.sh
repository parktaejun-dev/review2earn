#!/bin/bash

echo "üîç Review2Earn v6.0 - Hardcoding Check"
echo "========================================"
echo ""

# ============================================
# 1Ô∏è‚É£ mallId ÌïòÎìúÏΩîÎî© Í≤ÄÏÇ¨
# ============================================
echo "1Ô∏è‚É£ Hardcoded mallId:"
echo "--------------------"
MALL_ID_FOUND=$(grep -rn "mallId.*=.*['\"]dhdshop['\"]" src/ --include="*.ts" --include="*.tsx" 2>/dev/null)
MALL_ID_DEFAULT=$(grep -rn "||.*['\"]dhdshop['\"]" src/ --include="*.ts" --include="*.tsx" 2>/dev/null)

if [ -z "$MALL_ID_FOUND" ] && [ -z "$MALL_ID_DEFAULT" ]; then
  echo "‚úÖ No hardcoded mallId found"
else
  echo "‚ùå Found hardcoded mallId:"
  echo "$MALL_ID_FOUND"
  echo "$MALL_ID_DEFAULT"
fi
echo ""

# ============================================
# 2Ô∏è‚É£ Í≥†Ï†ï Í∏àÏï° ÌïòÎìúÏΩîÎî© Í≤ÄÏÇ¨ (5000, 10000 Îì±)
# ============================================
echo "2Ô∏è‚É£ Hardcoded amounts (5000, 10000, etc):"
echo "--------------------"
AMOUNT_FOUND=$(grep -rn "amount.*:.*\(5000\|10000\)" src/ --include="*.ts" --include="*.tsx" | grep -v "increment\|reduce\|orderAmount\|calculateReward" 2>/dev/null)

if [ -z "$AMOUNT_FOUND" ]; then
  echo "‚úÖ No hardcoded amounts found"
else
  echo "‚ùå Found hardcoded amounts:"
  echo "$AMOUNT_FOUND"
fi
echo ""

# ============================================
# 3Ô∏è‚É£ discount_amount ÌïòÎìúÏΩîÎî© Í≤ÄÏÇ¨
# ============================================
echo "3Ô∏è‚É£ Hardcoded discount_amount:"
echo "--------------------"
DISCOUNT_FOUND=$(grep -rn "discount_amount.*:.*[0-9]" src/ --include="*.ts" --include="*.tsx" 2>/dev/null)

if [ -z "$DISCOUNT_FOUND" ]; then
  echo "‚úÖ No hardcoded discount_amount found"
else
  echo "‚ùå Found hardcoded discount_amount:"
  echo "$DISCOUNT_FOUND"
fi
echo ""

# ============================================
# 4Ô∏è‚É£ URL ÌïòÎìúÏΩîÎî© Í≤ÄÏÇ¨ (ÌôòÍ≤ΩÎ≥ÄÏàò ÏóÜÎäî Í≤ΩÏö∞)
# ============================================
echo "4Ô∏è‚É£ Hardcoded URLs (without env):"
echo "--------------------"
URL_FOUND=$(grep -rn "https://review2earn.vercel.app" src/ --include="*.ts" --include="*.tsx" | grep -v "process.env\|NEXT_PUBLIC" 2>/dev/null)

if [ -z "$URL_FOUND" ]; then
  echo "‚úÖ No hardcoded URLs found (all use env vars)"
else
  echo "‚ö†Ô∏è  Found URLs without env vars:"
  echo "$URL_FOUND"
fi
echo ""

# ============================================
# 5Ô∏è‚É£ ÎπÑÏú® ÌïòÎìúÏΩîÎî© Í≤ÄÏÇ¨ (0.01, 0.005 Îì±)
# ============================================
echo "5Ô∏è‚É£ Hardcoded rates (should use DB or env):"
echo "--------------------"
RATE_FOUND=$(grep -rn "Rate.*=.*0\.\(01\|005\)" src/ --include="*.ts" --include="*.tsx" | grep -v "process.env\|DEFAULT_" 2>/dev/null)

if [ -z "$RATE_FOUND" ]; then
  echo "‚úÖ No hardcoded rates found (using DB/env)"
else
  echo "‚ö†Ô∏è  Found hardcoded rates:"
  echo "$RATE_FOUND"
fi
echo ""

# ============================================
# 6Ô∏è‚É£ ÌÖåÏä§Ìä∏/Îç∞Î™® Î¨∏ÏûêÏó¥ Í≤ÄÏÇ¨
# ============================================
echo "6Ô∏è‚É£ Test/Demo strings:"
echo "--------------------"
TEST_FOUND=$(grep -rn "['\"]test['\"]" src/ --include="*.ts" --include="*.tsx" | grep -v "test-connection\|testing\|testMode" 2>/dev/null)

if [ -z "$TEST_FOUND" ]; then
  echo "‚úÖ No test strings found"
else
  echo "‚ö†Ô∏è  Found test strings:"
  echo "$TEST_FOUND" | head -5
  echo "... (showing first 5)"
fi
echo ""

# ============================================
# 7Ô∏è‚É£ calculateReward ÏÇ¨Ïö© ÌôïÏù∏ (ÎèôÏ†Å Í≥ÑÏÇ∞)
# ============================================
echo "7Ô∏è‚É£ Dynamic reward calculation check:"
echo "--------------------"
CALC_USAGE=$(grep -rn "calculateReward" src/ --include="*.ts" --include="*.tsx" 2>/dev/null | wc -l)

if [ "$CALC_USAGE" -gt 0 ]; then
  echo "‚úÖ calculateReward is used ($CALC_USAGE times)"
  grep -rn "calculateReward" src/ --include="*.ts" --include="*.tsx" 2>/dev/null
else
  echo "‚ùå calculateReward is NOT used (still using hardcoded values?)"
fi
echo ""

# ============================================
# 8Ô∏è‚É£ ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏
# ============================================
echo "8Ô∏è‚É£ Environment variables check:"
echo "--------------------"
if [ -f .env ]; then
  if grep -q "DEFAULT_REVIEWER_RATE" .env; then
    echo "‚úÖ DEFAULT_REVIEWER_RATE found in .env"
  else
    echo "‚ùå DEFAULT_REVIEWER_RATE NOT found in .env"
  fi
  
  if grep -q "DEFAULT_BUYER_DISCOUNT_RATE" .env; then
    echo "‚úÖ DEFAULT_BUYER_DISCOUNT_RATE found in .env"
  else
    echo "‚ùå DEFAULT_BUYER_DISCOUNT_RATE NOT found in .env"
  fi
  
  if grep -q "DEFAULT_PLATFORM_FEE_RATE" .env; then
    echo "‚úÖ DEFAULT_PLATFORM_FEE_RATE found in .env"
  else
    echo "‚ùå DEFAULT_PLATFORM_FEE_RATE NOT found in .env"
  fi
else
  echo "‚ö†Ô∏è  .env file not found"
fi
echo ""

# ============================================
# ÏµúÏ¢Ö ÏöîÏïΩ
# ============================================
echo "========================================"
echo "üéØ Final Summary"
echo "========================================"

ERRORS=0

if [ ! -z "$MALL_ID_FOUND" ] || [ ! -z "$MALL_ID_DEFAULT" ]; then
  echo "‚ùå Hardcoded mallId detected"
  ((ERRORS++))
fi

if [ ! -z "$AMOUNT_FOUND" ]; then
  echo "‚ùå Hardcoded amounts detected"
  ((ERRORS++))
fi

if [ ! -z "$DISCOUNT_FOUND" ]; then
  echo "‚ùå Hardcoded discount_amount detected"
  ((ERRORS++))
fi

if [ "$CALC_USAGE" -eq 0 ]; then
  echo "‚ùå calculateReward not used"
  ((ERRORS++))
fi

if [ $ERRORS -eq 0 ]; then
  echo "‚úÖ All checks passed! No hardcoding detected."
  exit 0
else
  echo "‚ùå Found $ERRORS issue(s). Please fix before deployment."
  exit 1
fi
